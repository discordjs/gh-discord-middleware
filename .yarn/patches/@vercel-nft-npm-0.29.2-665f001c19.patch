diff --git a/out/node-file-trace.d.ts b/out/node-file-trace.d.ts
index 961dd0391a4124de23eba4539fe6f254b866cf27..3424f5387c55442dc796528ab2730c27945c11cf 100644
--- a/out/node-file-trace.d.ts
+++ b/out/node-file-trace.d.ts
@@ -23,7 +23,7 @@ export declare class Job {
     reasons: NodeFileTraceReasons;
     private cachedFileSystem;
     private remappings;
-    constructor({ base, processCwd, exports, conditions, exportsOnly, paths, ignore, log, mixedModules, ts, analysis, cache, fileIOConcurrency, }: NodeFileTraceOptions);
+    constructor({ base, processCwd, exports, conditions, exportsOnly, paths, ignore, log, mixedModules, ts, analysis, cache, web, fileIOConcurrency, }: NodeFileTraceOptions);
     addRemapping(path: string, dep: string): void;
     readlink(path: string): Promise<string | null>;
     isFile(path: string): Promise<boolean>;
diff --git a/out/node-file-trace.js b/out/node-file-trace.js
index 2ca08aa0bbcef87d67c87ef6b462dbd1079ad76b..2ad9cbd391f612242507a0908b58e5936bbd5bbc 100644
--- a/out/node-file-trace.js
+++ b/out/node-file-trace.js
@@ -91,7 +91,7 @@ class Job {
     reasons = new Map();
     cachedFileSystem;
     remappings = new Map();
-    constructor({ base = process.cwd(), processCwd, exports, conditions = exports || ['node'], exportsOnly = false, paths = {}, ignore, log = false, mixedModules = false, ts = true, analysis = {}, cache, 
+    constructor({ base = process.cwd(), processCwd, exports, conditions = exports || ['node'], exportsOnly = false, paths = {}, ignore, log = false, mixedModules = false, ts = true, analysis = {}, cache, web = false,
     // we use a default of 1024 concurrency to balance
     // performance and memory usage for fs operations
     fileIOConcurrency = 1024, }) {
@@ -137,6 +137,7 @@ class Job {
         this.paths = resolvedPaths;
         this.log = log;
         this.mixedModules = mixedModules;
+        this.web = web;
         this.cachedFileSystem = new fs_1.CachedFileSystem({ cache, fileIOConcurrency });
         this.analysis = {};
         if (analysis !== false) {
diff --git a/out/resolve-dependency.js b/out/resolve-dependency.js
index 23875e30dd78967b28607e1f63c158876aee343c..5bf46ac097becc774d94848f76429faa27ba7b4f 100644
--- a/out/resolve-dependency.js
+++ b/out/resolve-dependency.js
@@ -71,9 +71,10 @@ async function resolveDir(path, parent, job) {
     if (!(await job.isDir(path)))
         return;
     const pkgCfg = await getPkgCfg(path, job);
-    if (pkgCfg && typeof pkgCfg.main === 'string') {
-        const resolved = (await resolveFile((0, path_1.resolve)(path, pkgCfg.main), parent, job)) ||
-            (await resolveFile((0, path_1.resolve)(path, pkgCfg.main, 'index'), parent, job));
+    if (pkgCfg && ((job.web && (typeof pkgCfg.browser === 'string' || typeof pkgCfg.module === 'string')) || typeof pkgCfg.main === 'string')) {
+        const fieldValue = job.web ? (typeof pkgCfg.browser === 'string' ? pkgCfg.browser : pkgCfg.web): pkgCfg.main;
+        const resolved = (await resolveFile((0, path_1.resolve)(path, fieldValue), parent, job)) ||
+            (await resolveFile((0, path_1.resolve)(path, fieldValue, 'index'), parent, job));
         if (resolved) {
             await job.emitFile(path + path_1.sep + 'package.json', 'resolve', parent);
             return resolved;
diff --git a/out/types.d.ts b/out/types.d.ts
index b8b2f2d26af6a47af535d10c0e93d4cc46084a9a..1ca95e4e8edc7c06aab55025fd9abc9375250b49 100644
--- a/out/types.d.ts
+++ b/out/types.d.ts
@@ -48,6 +48,7 @@ export interface NodeFileTraceOptions {
     readlink?: (path: string) => Promise<string | null>;
     resolve?: (id: string, parent: string, job: Job, cjsResolve: boolean) => Promise<string | string[]>;
     fileIOConcurrency?: number;
+    web?: boolean;
 }
 export type NodeFileTraceReasonType = 'initial' | 'resolve' | 'dependency' | 'asset' | 'sharedlib';
 export interface NodeFileTraceReasons extends Map<string, {
